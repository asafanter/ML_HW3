C:\python\python.exe C:/STUDY/ML_HW3/main.py

_________________ STEP 2: find hyper-parameters _________________

RandomForestClassifier: p=(criterion,min_samples_split)
  criterion = the function to measure the quality of a split; default=gini
  min_samples_split = min num of samples required to be at leaf; default=2
	 p=('gini', 2)	 score=0.8831466325798422
	 p=('gini', 3)	 score=0.8863026249754379
	 p=('gini', 4)	 score=0.8886072358266659
	 p=('gini', 5)	 score=0.8823061556163572
	 p=('gini', 6)	 score=0.8889643055162489
	 p=('gini', 7)	 score=0.8897748611948046
	 p=('gini', 8)	 score=0.8859639076742306
	 p=('gini', 9)	 score=0.8852937540386112
	 p=('gini', 10)	 score=0.8829549553940123
	 p=('gini', 11)	 score=0.8824713931416566
	 p=('gini', 12)	 score=0.8799774003669066
	 p=('gini', 13)	 score=0.8832903612254406
	 p=('gini', 14)	 score=0.8811554272401236
	 p=('entropy', 2)	 score=0.8877917025286914
	 p=('entropy', 3)	 score=0.8871067577739064
	 p=('entropy', 4)	 score=0.8911148094252861
	 p=('entropy', 5)	 score=0.886629362780557
	 p=('entropy', 6)	 score=0.8876347201187942
	 p=('entropy', 7)	 score=0.8894810602072944
	 p=('entropy', 8)	 score=0.8857704244607874
	 p=('entropy', 9)	 score=0.8856058996507045
	 p=('entropy', 10)	 score=0.8834505264272604
	 p=('entropy', 11)	 score=0.8831014455670776
	 p=('entropy', 12)	 score=0.8850960846143036
	 p=('entropy', 13)	 score=0.8831228743873408
	 p=('entropy', 14)	 score=0.8816090904877034
	 >>>>	 p=('entropy', 4) achieved the maximum score of 0.8911148094252861

DecisionTreeClassifier: p=(criterion,min_samples_split)
  criterion = the function to measure the quality of a split; default=gini
  min_samples_split = min num of samples required to be at leaf; default=2
	 p=('gini', 2)	 score=0.8304748858280983
	 p=('gini', 3)	 score=0.8329566906881546
	 p=('gini', 4)	 score=0.8304773788231818
	 p=('gini', 5)	 score=0.8294696946742203
	 p=('gini', 6)	 score=0.8349795911228135
	 p=('gini', 7)	 score=0.832978965108285
	 p=('gini', 8)	 score=0.8313172725477374
	 p=('gini', 9)	 score=0.8315023098438292
	 p=('gini', 10)	 score=0.8321526247208547
	 p=('gini', 11)	 score=0.8324771311563322
	 p=('gini', 12)	 score=0.8313286605600181
	 p=('gini', 13)	 score=0.8313173147144279
	 p=('gini', 14)	 score=0.833147913179277
	 p=('entropy', 2)	 score=0.8438309704404408
	 p=('entropy', 3)	 score=0.8456395247129723
	 p=('entropy', 4)	 score=0.8451594983589736
	 p=('entropy', 5)	 score=0.8463085029589706
	 p=('entropy', 6)	 score=0.8470046373455966
	 p=('entropy', 7)	 score=0.8458265500480964
	 p=('entropy', 8)	 score=0.8464868638973039
	 p=('entropy', 9)	 score=0.8441634187527495
	 p=('entropy', 10)	 score=0.8421417432982157
	 p=('entropy', 11)	 score=0.8433186851774289
	 p=('entropy', 12)	 score=0.8439823484884513
	 p=('entropy', 13)	 score=0.8428078784545068
	 p=('entropy', 14)	 score=0.8424747427824576
	 >>>>	 p=('entropy', 6) achieved the maximum score of 0.8470046373455966

KNeighborsClassifier: p=(n_neighbors,weights)
  n_neighbors = num of neighbors; default=5
  weights = weight function used in prediction; default=uniform
	 p=(1, 'uniform')	 score=0.7878248553076574
	 p=(1, 'distance')	 score=0.7878248553076574
	 p=(2, 'uniform')	 score=0.7821584940431625
	 p=(2, 'distance')	 score=0.7878248553076574
	 p=(3, 'uniform')	 score=0.7924938500516657
	 p=(3, 'distance')	 score=0.796316010217349
	 p=(4, 'uniform')	 score=0.7980176885349396
	 p=(4, 'distance')	 score=0.8011584966653611
	 p=(5, 'uniform')	 score=0.7896832078151445
	 p=(5, 'distance')	 score=0.8004976359198084
	 p=(6, 'uniform')	 score=0.7925090609530534
	 p=(6, 'distance')	 score=0.8011821343157349
	 p=(7, 'uniform')	 score=0.786863589471226
	 p=(7, 'distance')	 score=0.795351173208798
	 p=(8, 'uniform')	 score=0.7840324134289742
	 p=(8, 'distance')	 score=0.7948572114267181
	 p=(9, 'uniform')	 score=0.7798675289051606
	 p=(9, 'distance')	 score=0.7908537012812391
	 p=(10, 'uniform')	 score=0.7790299532952598
	 p=(10, 'distance')	 score=0.7901972553038985
	 p=(11, 'uniform')	 score=0.7696831087059087
	 p=(11, 'distance')	 score=0.7880169595388546
	 p=(12, 'uniform')	 score=0.7668460913995896
	 p=(12, 'distance')	 score=0.7818564615731622
	 p=(13, 'uniform')	 score=0.7606907001334682
	 p=(13, 'distance')	 score=0.7785183192007018
	 p=(14, 'uniform')	 score=0.7566857292413759
	 p=(14, 'distance')	 score=0.7743510023001179
	 >>>>	 p=(6, 'distance') achieved the maximum score of 0.8011821343157349

SVC: p=(kernel)
  kernel = specifies the kernel type to be used in the algorithm; default=rbf
	 p=linear	 score=0.7975176244891198
	 p=poly	 score=0.6646679567321548
	 p=rbf	 score=0.7254847318223991
	 p=sigmoid	 score=0.27765827973801765
	 >>>>	 p=linear achieved the maximum score of 0.7975176244891198

Process finished with exit code 0
